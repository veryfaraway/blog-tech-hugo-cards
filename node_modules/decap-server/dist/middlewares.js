#!/usr/bin/env node
(()=>{"use strict";var e={322:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.branchFromContentKey=t.contentKeyFromBranch=t.parseContentKey=t.generateContentKey=t.statusToLabel=t.labelToStatus=t.isCMSLabel=t.MERGE_COMMIT_MESSAGE=t.DEFAULT_PR_BODY=t.CMS_BRANCH_PREFIX=void 0,t.CMS_BRANCH_PREFIX="cms",t.DEFAULT_PR_BODY="Automatically generated by Decap CMS",t.MERGE_COMMIT_MESSAGE="Automatically generated. Merged on Decap CMS.";function a(e){return e||"decap-cms/"}t.isCMSLabel=function(e,t){return e.startsWith(a(t))},t.labelToStatus=function(e,t){return e.slice(a(t).length)},t.statusToLabel=function(e,t){return`${a(t)}${e}`},t.generateContentKey=function(e,t){return`${e}/${t}`},t.parseContentKey=function(e){const t=e.indexOf("/");return{collection:e.slice(0,t),slug:e.slice(t+1)}},t.contentKeyFromBranch=function(e){return e.slice(`${t.CMS_BRANCH_PREFIX}/`.length)},t.branchFromContentKey=function(e){return`${t.CMS_BRANCH_PREFIX}/${e}`}},135:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createLogger=void 0;const r=i(a(773)),{combine:n,colorize:s,simple:o}=r.default.format;t.createLogger=function({level:e}){return r.default.createLogger({level:e,format:n(s(),o()),transports:[new r.default.transports.Console]})}},394:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerCommonMiddlewares=void 0;const r=i(a(860)),n=i(a(470)),s=i(a(582));t.registerCommonMiddlewares=function(e,t){const{logger:a}=t,i={write:e=>{a.debug(String(e).trim())}};e.use((0,n.default)("combined",{stream:i})),e.use((0,s.default)()),e.use(r.default.json({limit:"50mb"}))}},598:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pathTraversal=void 0;const r=i(a(414)),n=i(a(17));t.pathTraversal=function(e){return r.default.extend({type:"path",base:r.default.string().required(),messages:{"path.invalid":"{{#label}} must resolve to a path under the configured repository"},validate(t,a){if(!n.default.join(e,t).startsWith(e))return{value:t,errors:a.error("path.invalid")}}}).path()}},761:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.joi=t.defaultSchema=void 0;const r=i(a(414)),n=["info","entriesByFolder","entriesByFiles","getEntry","unpublishedEntries","unpublishedEntry","unpublishedEntryDataFile","unpublishedEntryMediaFile","deleteUnpublishedEntry","persistEntry","updateUnpublishedEntryStatus","publishUnpublishedEntry","getMedia","getMediaFile","persistMedia","deleteFile","deleteFiles","getDeployPreview"],s=r.default.string().required(),o=r.default.number().required(),l=r.default.bool().required(),c=s,u=s;t.defaultSchema=function({path:e=s}={}){const t=r.default.object({branch:s}),a=r.default.object({path:e,content:s,encoding:s.valid("base64")}),i=r.default.object({slug:s,path:e,raw:s,newPath:e.optional()}),d=r.default.when("action",{switch:[{is:"info",then:r.default.allow()},{is:"entriesByFolder",then:t.keys({folder:e,extension:s,depth:o}).required()},{is:"entriesByFiles",then:t.keys({files:r.default.array().items(r.default.object({path:e,label:r.default.string()})).required()})},{is:"getEntry",then:t.keys({path:e}).required()},{is:"unpublishedEntries",then:t.keys({branch:s}).required()},{is:"unpublishedEntry",then:t.keys({id:r.default.string().optional(),collection:r.default.string().optional(),slug:r.default.string().optional(),cmsLabelPrefix:r.default.string().optional()}).required()},{is:"unpublishedEntryDataFile",then:t.keys({collection:c,slug:u,id:s,path:s}).required()},{is:"unpublishedEntryMediaFile",then:t.keys({collection:c,slug:u,id:s,path:s}).required()},{is:"deleteUnpublishedEntry",then:t.keys({collection:c,slug:u}).required()},{is:"persistEntry",then:t.keys({cmsLabelPrefix:r.default.string().optional(),entry:i,dataFiles:r.default.array().items(i),assets:r.default.array().items(a).required(),options:r.default.object({collectionName:r.default.string(),commitMessage:s,useWorkflow:l,status:s}).required()}).xor("entry","dataFiles").required()},{is:"updateUnpublishedEntryStatus",then:t.keys({collection:c,slug:u,newStatus:s,cmsLabelPrefix:r.default.string().optional()}).required()},{is:"publishUnpublishedEntry",then:t.keys({collection:c,slug:u}).required()},{is:"getMedia",then:t.keys({mediaFolder:e}).required()},{is:"getMediaFile",then:t.keys({path:e}).required()},{is:"persistMedia",then:t.keys({asset:a.required(),options:r.default.object({commitMessage:s}).required()}).required()},{is:"deleteFile",then:t.keys({path:e,options:r.default.object({commitMessage:s}).required()}).required()},{is:"deleteFiles",then:t.keys({paths:r.default.array().items(e).min(1).required(),options:r.default.object({commitMessage:s}).required()}).required()},{is:"getDeployPreview",then:t.keys({collection:c,slug:u}).required()}],otherwise:r.default.forbidden()});return r.default.object({action:r.default.valid(...n).required(),params:d})},t.joi=function(e){return(t,a,i)=>{const{error:r}=e.validate(t.body,{allowUnknown:!0});if(r){const{details:e}=r,t=e.map((e=>e.message)).join(",");a.status(422).json({error:t})}else i()}}},102:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.getSchema=t.localFsMiddleware=void 0;const r=i(a(17)),n=a(761),s=a(598),o=a(802),l=a(848);function c({repoPath:e,logger:t}){return async function(a,i){try{const{body:t}=a;switch(t.action){case"info":i.json({repo:r.default.basename(e),publish_modes:["simple"],type:"local_fs"});break;case"entriesByFolder":{const a=t.params,{folder:r,extension:n,depth:s}=a,c=await(0,o.listRepoFiles)(e,r,n,s).then((t=>(0,l.entriesFromFiles)(e,t.map((e=>({path:e}))))));i.json(c);break}case"entriesByFiles":{const a=t.params,r=await(0,l.entriesFromFiles)(e,a.files);i.json(r);break}case"getEntry":{const a=t.params,[r]=await(0,l.entriesFromFiles)(e,[{path:a.path}]);i.json(r);break}case"persistEntry":{const{entry:a,dataFiles:n=[a],assets:s}=t.params;await Promise.all(n.map((t=>(0,o.writeFile)(r.default.join(e,t.path),t.raw)))),await Promise.all(s.map((t=>(0,o.writeFile)(r.default.join(e,t.path),Buffer.from(t.content,t.encoding))))),n.every((e=>e.newPath))&&n.forEach((async t=>{await(0,o.move)(r.default.join(e,t.path),r.default.join(e,t.newPath))})),i.json({message:"entry persisted"});break}case"getMedia":{const{mediaFolder:a}=t.params,r=await(0,o.listRepoFiles)(e,a,"",1),n=await Promise.all(r.map((t=>(0,l.readMediaFile)(e,t))));i.json(n);break}case"getMediaFile":{const{path:a}=t.params,r=await(0,l.readMediaFile)(e,a);i.json(r);break}case"persistMedia":{const{asset:a}=t.params;await(0,o.writeFile)(r.default.join(e,a.path),Buffer.from(a.content,a.encoding));const n=await(0,l.readMediaFile)(e,a.path);i.json(n);break}case"deleteFile":{const{path:a}=t.params;await(0,o.deleteFile)(e,a),i.json({message:`deleted file ${a}`});break}case"deleteFiles":{const{paths:a}=t.params;await Promise.all(a.map((t=>(0,o.deleteFile)(e,t)))),i.json({message:`deleted files ${a.join(", ")}`});break}case"getDeployPreview":i.json(null);break;default:{const e=`Unknown action ${t.action}`;i.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(a.body)}: ${e instanceof Error?e.message:"Unknown error"}`),i.status(500).json({error:"Unknown error"})}}}function u({repoPath:e}){return(0,n.defaultSchema)({path:(0,s.pathTraversal)(e)})}t.localFsMiddleware=c,t.getSchema=u,t.registerMiddleware=async function(e,t){const{logger:a}=t,i=r.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());e.post("/api/v1",(0,n.joi)(u({repoPath:i}))),e.post("/api/v1",c({repoPath:i,logger:a})),a.info(`Decap CMS File System Proxy Server configured with ${i}`)}},377:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.localGitMiddleware=t.getSchema=t.validateRepo=void 0;const r=i(a(17)),n=a(147),s=a(322),o=a(419),l=i(a(546)),c=a(757),u=a(761),d=a(598),p=a(802),f=a(848);async function m(e,t){await e.add("."),await e.commit(t,void 0,{"--no-verify":null,"--no-gpg-sign":null})}async function h(e){return await e.branchLocal().then((e=>e.current))}async function g(e,t,a){const i=await h(e);try{return i!==t&&await e.checkout(t),await a()}finally{await e.checkout(i)}}function y(e){return`branch.${e}.description`}async function w(e,t,a,i,n){await Promise.all(a.map((e=>(0,p.writeFile)(r.default.join(t,e.path),e.raw)))),await Promise.all(i.map((e=>(0,p.writeFile)(r.default.join(t,e.path),Buffer.from(e.content,e.encoding))))),a.every((e=>e.newPath))&&a.forEach((async e=>{await(0,p.move)(r.default.join(t,e.path),r.default.join(t,e.newPath))})),await m(e,n)}async function b(e,t){return await e.branchLocal().then((({all:e})=>e.includes(t)))}async function F(e,t,a){const i=await e.diff([t,a]);return(0,o.parse)(i).map((e=>{var t,a;const i=(null===(t=e.oldPath)||void 0===t?void 0:t.replace(/b\//,""))||"",r=(null===(a=e.newPath)||void 0===a?void 0:a.replace(/b\//,""))||"",n=r||i;return{oldPath:i,newPath:r,status:e.status,newFile:"added"===e.status,path:n,id:n,binary:e.binary||/.svg$/.test(n)}}))}async function v({repoPath:e}){const t=(0,l.default)(e);if(!await t.checkIsRepo())throw Error(`${e} is not a valid git repository`)}function M({repoPath:e}){return(0,u.defaultSchema)({path:(0,d.pathTraversal)(e)})}function j({repoPath:e,logger:t}){const a=(0,l.default)(e),i=(0,c.withTimeout)(new c.Mutex,3e3,new Error("Request timed out"));return async function(o,l){let c;try{c=await i.acquire();const{body:t}=o;if("info"===t.action)return void l.json({repo:r.default.basename(e),publish_modes:["simple","editorial_workflow"],type:"local_git"});const{branch:u}=t.params;if(!await b(a,u)){const e=`Default branch '${u}' doesn't exist`;return void l.status(422).json({error:e})}switch(t.action){case"entriesByFolder":{const i=t.params,{folder:r,extension:n,depth:s}=i,o=await g(a,u,(()=>(0,p.listRepoFiles)(e,r,n,s).then((t=>(0,f.entriesFromFiles)(e,t.map((e=>({path:e}))))))));l.json(o);break}case"entriesByFiles":{const i=t.params,r=await g(a,u,(()=>(0,f.entriesFromFiles)(e,i.files)));l.json(r);break}case"getEntry":{const i=t.params,[r]=await g(a,u,(()=>(0,f.entriesFromFiles)(e,[{path:i.path}])));l.json(r);break}case"unpublishedEntries":{const e=await a.branchLocal().then((e=>e.all.filter((e=>e.startsWith(`${s.CMS_BRANCH_PREFIX}/`)))));l.json(e.map(s.contentKeyFromBranch));break}case"unpublishedEntry":{let{id:i,collection:r,slug:n,cmsLabelPrefix:o}=t.params;i&&({collection:r,slug:n}=(0,s.parseContentKey)(i));const c=(0,s.generateContentKey)(r,n),d=(0,s.branchFromContentKey)(c);if(!await b(a,d))return l.status(404).json({message:"Not Found"});{const t=await F(a,u,d),i=await a.raw(["config",y(d)]),c=i&&(0,s.labelToStatus)(i.trim(),o||""),f=t.length>=0?await g(a,d,(async()=>(await Promise.all(t.map((({newPath:t})=>(0,p.getUpdateDate)(e,t))))).reduce(((e,t)=>e>t?e:t)))):new Date,m={collection:r,slug:n,status:c,diffs:t,updatedAt:f};l.json(m)}break}case"unpublishedEntryDataFile":{const{path:i,collection:r,slug:n}=t.params,o=(0,s.generateContentKey)(r,n),c=(0,s.branchFromContentKey)(o),[u]=await g(a,c,(()=>(0,f.entriesFromFiles)(e,[{path:i}])));l.json({data:u.data});break}case"unpublishedEntryMediaFile":{const{path:i,collection:r,slug:n}=t.params,o=(0,s.generateContentKey)(r,n),c=(0,s.branchFromContentKey)(o),u=await g(a,c,(()=>(0,f.readMediaFile)(e,i)));l.json(u);break}case"deleteUnpublishedEntry":{const{collection:e,slug:i}=t.params,r=(0,s.generateContentKey)(e,i),n=(0,s.branchFromContentKey)(r);await h(a)===n&&await a.checkoutLocalBranch(u),await a.branch(["-D",n]),l.json({message:`deleted branch: ${n}`});break}case"persistEntry":{const{cmsLabelPrefix:i,entry:o,dataFiles:c=[o],assets:d,options:p}=t.params;if(p.useWorkflow){const t=c[0].slug,o=p.collectionName,l=(0,s.generateContentKey)(o,t),f=(0,s.branchFromContentKey)(l);await g(a,u,(async()=>{const t=await b(a,f);t?await a.checkout(f):await a.checkoutLocalBranch(f),await async function(e,t){const a=await e.raw(["config","commit.gpgsign"]);try{"true"===a&&await e.addConfig("commit.gpgsign","false"),await e.rebase([t,"--no-verify"])}finally{"true"===a&&await e.addConfig("commit.gpgsign",a)}}(a,u);const o=(await F(a,u,f)).filter((e=>e.binary&&!d.map((e=>e.path)).includes(e.path)));if(await Promise.all(o.map((t=>n.promises.unlink(r.default.join(e,t.path))))),await w(a,e,c,d,p.commitMessage),!t){const e=(0,s.statusToLabel)(p.status,i||"");await a.addConfig(y(f),e)}}))}else await g(a,u,(async()=>{await w(a,e,c,d,p.commitMessage)}));l.json({message:"entry persisted"});break}case"updateUnpublishedEntryStatus":{const{collection:e,slug:i,newStatus:r,cmsLabelPrefix:n}=t.params,o=(0,s.generateContentKey)(e,i),c=(0,s.branchFromContentKey)(o),d=(0,s.statusToLabel)(r,n||"");await a.addConfig(y(c),d),l.json({message:`${u} description was updated to ${d}`});break}case"publishUnpublishedEntry":{const{collection:e,slug:i}=t.params,r=(0,s.generateContentKey)(e,i),n=(0,s.branchFromContentKey)(r);await async function(e,t,a){const i=await e.raw(["config","commit.gpgsign"]);try{"true"===i&&await e.addConfig("commit.gpgsign","false"),await e.mergeFromTo(t,a)}finally{"true"===i&&await e.addConfig("commit.gpgsign",i)}}(a,n,u),await a.deleteLocalBranch(n),l.json({message:`branch ${n} merged to ${u}`});break}case"getMedia":{const{mediaFolder:i}=t.params,r=await g(a,u,(async()=>{const t=await(0,p.listRepoFiles)(e,i,"",1);return await Promise.all(t.map((t=>(0,f.readMediaFile)(e,t))))}));l.json(r);break}case"getMediaFile":{const{path:i}=t.params,r=await g(a,u,(()=>(0,f.readMediaFile)(e,i)));l.json(r);break}case"persistMedia":{const{asset:i,options:{commitMessage:n}}=t.params,s=await g(a,u,(async()=>(await(0,p.writeFile)(r.default.join(e,i.path),Buffer.from(i.content,i.encoding)),await m(a,n),(0,f.readMediaFile)(e,i.path))));l.json(s);break}case"deleteFile":{const{path:i,options:{commitMessage:r}}=t.params;await g(a,u,(async()=>{await(0,p.deleteFile)(e,i),await m(a,r)})),l.json({message:`deleted file ${i}`});break}case"deleteFiles":{const{paths:i,options:{commitMessage:r}}=t.params;await g(a,u,(async()=>{await Promise.all(i.map((t=>(0,p.deleteFile)(e,t)))),await m(a,r)})),l.json({message:`deleted files ${i.join(", ")}`});break}case"getDeployPreview":l.json(null);break;default:{const e=`Unknown action ${t.action}`;l.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(o.body)}: ${e instanceof Error?e.message:"Unknown error"}`),l.status(500).json({error:"Unknown error"})}finally{c&&c()}}}t.validateRepo=v,t.getSchema=M,t.localGitMiddleware=j,t.registerMiddleware=async function(e,t){const{logger:a}=t,i=r.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());await v({repoPath:i}),e.post("/api/v1",(0,u.joi)(M({repoPath:i}))),e.post("/api/v1",j({repoPath:i,logger:a})),a.info(`Decap CMS Git Proxy Server configured with ${i}`)}},848:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.readMediaFile=t.entriesFromFiles=void 0;const r=i(a(113)),n=i(a(17)),s=a(147);function o(e){return r.default.createHash("sha256").update(e).digest("hex")}function l(e){return e.replace(/\\/g,"/")}t.entriesFromFiles=async function(e,t){return Promise.all(t.map((async t=>{try{const a=await s.promises.readFile(n.default.join(e,t.path));return{data:a.toString(),file:{path:l(t.path),label:t.label,id:o(a)}}}catch(e){return{data:null,file:{path:l(t.path),label:t.label,id:null}}}})))},t.readMediaFile=async function(e,t){const a="base64",i=await s.promises.readFile(n.default.join(e,t));return{id:o(i),content:i.toString(a),encoding:a,path:l(t),name:n.default.basename(t)}}},802:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getUpdateDate=t.move=t.deleteFile=t.writeFile=t.listRepoFiles=void 0;const r=i(a(17)),n=a(147);async function s(e,t,a){if(a<=0)return[];try{const i=await n.promises.readdir(e,{withFileTypes:!0}),o=await Promise.all(i.map((i=>{const n=r.default.join(e,i.name);return i.isDirectory()?s(n,t,a-1):[n].filter((e=>e.endsWith(t)))})));return[].concat(...o)}catch(e){return[]}}async function o(e,t){await n.promises.mkdir(r.default.dirname(t),{recursive:!0}),await n.promises.rename(e,t)}t.listRepoFiles=async function(e,t,a,i){return(await s(r.default.join(e,t),a,i)).map((t=>t.slice(e.length+1)))},t.writeFile=async function(e,t){await n.promises.mkdir(r.default.dirname(e),{recursive:!0}),await n.promises.writeFile(e,t)},t.deleteFile=async function(e,t){await n.promises.unlink(r.default.join(e,t)).catch((()=>{}))},t.move=async function(e,t){await o(e,t);const a=r.default.dirname(e),i=r.default.dirname(t),n=await s(a,"",100);await Promise.all(n.map((e=>o(e,e.replace(a,i)))))},t.getUpdateDate=async function(e,t){return n.promises.stat(r.default.join(e,t)).then((e=>e.mtime)).catch((()=>new Date))}},414:e=>{e.exports=require("@hapi/joi")},757:e=>{e.exports=require("async-mutex")},582:e=>{e.exports=require("cors")},860:e=>{e.exports=require("express")},470:e=>{e.exports=require("morgan")},546:e=>{e.exports=require("simple-git")},419:e=>{e.exports=require("what-the-diff")},773:e=>{e.exports=require("winston")},113:e=>{e.exports=require("crypto")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")}},t={};function a(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i].call(n.exports,n,n.exports,a),n.exports}var i={};(()=>{var e=i;Object.defineProperty(e,"__esModule",{value:!0}),e.registerLocalFs=e.registerLocalGit=void 0;const t=a(394),r=a(377),n=a(102),s=a(135);function o(e){return{logger:(0,s.createLogger)({level:e.logLevel||"info"})}}e.registerLocalGit=async function(e,a={}){const i=o(a);(0,t.registerCommonMiddlewares)(e,i),await(0,r.registerMiddleware)(e,i)},e.registerLocalFs=async function(e,a={}){const i=o(a);(0,t.registerCommonMiddlewares)(e,i),await(0,n.registerMiddleware)(e,i)}})(),module.exports=i})();
//# sourceMappingURL=middlewares.js.map